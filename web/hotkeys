단축키
자동 import : ctrl + shift + o
주석처리 : 블럭설정 후 ctrl + shift + c
복사해서 붙여넣기 : 블럭설정 후 ctrl + alt + 방향키
라인이동 : alt + 방향키
라인삭제 : ctrl + d


Controller 생성 후
1. @Controller(C) 지정
2. 요청에 대한 매핑을 한다.
   메소드 선언 : @RequestMapping("요청uri")
   메소드 내부에서는 비지니스 로직 처리 후 화면을 연결한다
   비지니스로직 : DAO --> DTO(Model:M) 
   화면에 전달할 데이터가 있다면 Model(위와는 다른 Model임) 객체에 담는다
   : return "화면파일명"; view(V)
   
   
화면에 데이터를 전달하면서 화면 연결
1. Model 객체를 이용(추천 ★★★★★)
선언한 메소드에 Model 타입의 파라미터를 선언한후
선언한 파라미터변수에 attribute로 데이터를 담는다
: 파라미터변수.addAttribute("속성명", 데이터);
 

2. ModelAndView 객체를 이용
ModelAndView 타입의 변수를 선언한 후
선언한 변수에 Object로 데이터를 담는다.
선언한 변수.addObject("객체명", 데이터);
 
응답할 화면을 지정한다.
선언한 변수.setViewName("화면명");
return 선언한 변수;


* 서버에 전송된 화면에 있는 form 내의 데이터를 접근하는 방법
1. HttpServletRequest 객체를 이용하는 방법
	request.getParameter("파라미터 명")

2. @RequestParam 을 이용하는 방법
	필요한 데이터를 메소드의 파라미터로 선언하되 
	@RequestParam 을 지정

3. 데이터객체 VO(DTO)를 이용하는 방법
   메소드파라미터로 데이터객체 타입의 변수를 선언
   getter&setter를 만들기
  
4. @PathVariable 을 이용하는 방법
   필요한 데이터를 경로의 형태로 지정해서 보내고,
   경로의 데이터를 @PathVariable 을 선언하여 접근한다

**화면 연결 형태 : forward / redirect



















